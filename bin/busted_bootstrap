-- Busted command-line runner
local cli = require 'cliargs'
local lfs = require 'lfs'
require 'busted'

local pathseparator = _G.package.config:sub(1,1)
local is_windows = (pathseparator == "\\")
local defaultoutput = "utf_terminal"
if is_windows then defaultoutput = "plain_terminal" end
local defaultpattern = '_spec.lua'

local function sub_dir(dir)
  local dirs = {dir}
  local function yieldtree()
    dir = table.remove(dirs, #dirs)
    if dir then
      for entry in lfs.dir(dir) do
        if entry ~= "." and entry ~= ".." and entry:sub(1, 1) ~= "." then
          entry=dir..pathseparator..entry
          local attr=lfs.attributes(entry)
          if attr.mode == "directory" then
            table.insert(dirs, entry)
          else
            coroutine.yield(entry,attr)
          end
        end
      end

      return yieldtree()
    end
  end
  return coroutine.wrap(yieldtree)
end

local split = function(string, sep)
  local sep, fields = sep or ".", {}
  local pattern = ("([^%s]+)"):format(sep)
  string:gsub(pattern, function(c) fields[#fields+1] = c end)
  return fields
end

cli:set_name("busted")
cli:set_colsz(21,45)
cli:add_flag("--version", "prints the program's version and exits")

cli:add_argument("ROOT", "test script file/folder. Folders will be traversed for any file that matches the --pattern option.")

cli:add_option("-o, --output=LIBRARY", "output library to load", "output_lib", defaultoutput)
cli:add_option("-l, --lua=luajit", "path to the execution environment (lua or luajit)")
cli:add_option("-d, --cwd=cwd", "path to current working directory")
cli:add_option("-p, --pattern=pattern", "only run test files matching this pattern", "pattern", defaultpattern)
cli:add_option("-t, --tags=tags", "only run tests with these #tags")

cli:add_option("--lang=LANG", "language for error messages", "lang", "en")

cli:add_flag("-v", "verbose output of errors")
cli:add_flag("-s, --enable-sound", "executes 'say' command if available")
cli:add_flag("--suppress-pending", "suppress 'pending' test output")
cli:add_flag("--defer-print", "defer print to when test suite is complete")

local args = cli:parse_args()

if args then
  if args.version then
    return print("busted: version 1.1.0")
  end

  local root_file = args.ROOT
  local path = args.d

  if (root_file:sub(1,1) == pathseparator) and (path:sub(-1,-1) == pathseparator) then
    root_file = root_file:sub(2,-1)
  else 
    if (path ~= "") and (root_file:sub(1,1) ~= pathseparator) and (path:sub(-1,-1) ~= pathseparator) then
      path = path .. pathseparator
    end
  end
  root_file = path..root_file

  if args.lang then
    if args.lang:match(".lua") then
      -- not a module name, but a filename has been provided.
      -- in this case the filename should contain the language settings for
      -- both 'busted' and 'luassert', differs from module setup.
      local lang = loadfile(path..args.lang)

      if lang then
        lang()
      end
    else
      require('busted.languages.'..args.lang)
      require('luassert.languages.'..args.lang)
    end
  end

  local output

  if args.output_lib then
    if args.output_lib:match(".lua") then
      local o, err = loadfile(path..args.output_lib)

      if not err then
        output = o()()
      else
        output = require('busted.output.'..defaultoutput)()
      end
    else
      output = require('busted.output.'..args.output_lib)()
    end
  else
    output = require('busted.output.'..defaultoutput)()
  end

  busted.options = {
    verbose = args.v,
    suppress_pending = args["suppress-pending"],
    defer_print = args["defer-print"],
    sound = args.s,
    cwd = args.d,
    tags = split(args.t, ","),
    output = output,
    success_messages = success_messages or nil,
    failure_messages = failure_messages or nil,
  }

  local function dosinglefile(filename)
    local file, err = loadfile(filename)
    if file then
      file, err = pcall(function() file() end)
    end
    if err then
      print("An error occurred while loading a test::"..err)
    end
  end

  local mode, err = lfs.attributes(root_file, "mode")
  if mode == nil then
    print("An error occurred while accessing file/directory: "..root_file .. "\n" .. err)

  else
    if mode == "file" then
      dosinglefile(root_file)
    else
      local pattern = args.pattern ~= "" and args.pattern or defaultpattern
      for filename,attr in sub_dir(root_file) do
        if attr.mode == 'file' then
          local path,name,ext = filename:match("(.-)([^\\/]-([^%.]+))$")
          if ext == 'lua' and name:find(pattern) then
            dosinglefile(filename)
          end
        end
      end
    end

    print(busted().."\n")
  end
end
